{"ast":null,"code":"var _jsxFileName = \"D:\\\\FrontEnd\\\\snake-game\\\\src\\\\components\\\\GameBoard\\\\GameBoard.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { createFood } from \"../../utils/Food\";\nimport { growSnake, moveSnake, snakeEatItSeff, snakeISOoutOfBounce } from \"../../utils/Snake\";\nimport useInterval from \"use-interval\";\nimport { ScoreBar } from \"../ScoreBar/ScoreBar\";\nimport { StyledBordCell, StyledGameBord, StyledSnakeCell } from \"./GameBoard.styled\";\nimport { ModalWindowWraper } from \"../modalWindowWraper/modalWindowWraper\";\nimport { PauseWindow } from \"../PauseWindow/PauseWindow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 10;\nconst BASE_SPEED = 400;\nconst BASE_DIRECTION = \"down\";\nconst directionFromKey = function () {\n  let key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  switch (key.toString().toLowerCase()) {\n    case \"w\":\n      return \"up\";\n    case \"arrowup\":\n      return \"up\";\n    case \"s\":\n      return \"down\";\n    case \"arrowdown\":\n      return \"down\";\n    case \"d\":\n      return \"right\";\n    case \"arrowright\":\n      return \"right\";\n    case \"a\":\n      return \"left\";\n    case \"arrowleft\":\n      return \"left\";\n    default:\n      return \"\";\n  }\n};\nconst createBoard = BOARD_SIZE => {\n  let count = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let colum = 0; colum < BOARD_SIZE; colum++) {\n      currentRow.push(\"+\");\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\nexport const GameBoard = () => {\n  _s();\n  const START_SNAKE = [{\n    cord: {\n      x: 0,\n      y: 0\n    },\n    dir: \"down\"\n  }, {\n    cord: {\n      x: 0,\n      y: 1\n    },\n    dir: \"down\"\n  }];\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n  const [snake, setSnake] = useState([...START_SNAKE]);\n  const [food, setFood] = useState(createFood(BOARD_SIZE));\n  const [score, setScore] = useState(0);\n  const [dir, setDirection] = useState(BASE_DIRECTION);\n  const [speed, setSpeed] = useState(BASE_SPEED);\n  const [isPaused, setIsPaused] = useState(\"true\");\n  const spawnFood = () => {\n    const newSnake = moveSnake();\n    let newFood = createFood(BOARD_SIZE);\n    if (snake.some(_ref => {\n      let {\n        cord: {\n          x,\n          y\n        }\n      } = _ref;\n      return x === newFood.x && y === newFood.y;\n    })) {\n      newFood = spawnFood();\n    }\n    console.log(newFood);\n    return newFood;\n  };\n  useEffect(() => {\n    document.body.style.overflow = \"hidden\";\n    window.addEventListener(\"keydown\", moveControl);\n    return () => {\n      window.removeEventListener(\"keydown\", moveControl);\n      document.body.style.overflow = \"auto\";\n    };\n  });\n  const reset = () => {\n    setSnake([...START_SNAKE]);\n    setDirection(BASE_DIRECTION);\n    setScore(0);\n  };\n  useEffect(() => {\n    if (snakeEatItSeff(snake) || snakeISOoutOfBounce(snake, BOARD_SIZE)) {\n      setSnake([...START_SNAKE]);\n      setDirection(BASE_DIRECTION);\n      setScore(0);\n      setIsPaused(true);\n      return;\n    }\n    if (snake[snake.length - 1].cord.x === food.x && snake[snake.length - 1].cord.y === food.y) {\n      setSnake(prevSnake => growSnake(prevSnake));\n      setScore(prev => prev + food.cost);\n      setFood(spawnFood());\n    }\n  }, [snake]);\n  useInterval(() => {\n    console.log(\"interval\");\n    setSnake(prevSnake => moveSnake(prevSnake, dir));\n    speedController();\n  }, isPaused ? null : speed);\n  const cellType = (columnIndex, rowIndex) => {\n    if (snake.some(elem => elem.cord.x === columnIndex && elem.cord.y === rowIndex)) return \"snake\";\n    if (food.x === columnIndex && food.y === rowIndex) return \"food\";\n  };\n  const moveControl = e => {\n    const direction = directionFromKey(e.key);\n    direction && setDirection(direction);\n  };\n  const speedController = () => {\n    const dificulty = BASE_SPEED - Math.round(score / 100) * 100;\n    setSpeed(dificulty);\n  };\n  const tonglePause = () => {\n    setIsPaused(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isPaused && /*#__PURE__*/_jsxDEV(PauseWindow, {\n      closeWindow: tonglePause,\n      restart: () => {\n        reset();\n        tonglePause();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ScoreBar, {\n      children: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: tonglePause,\n      children: \"Pause\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledGameBord, {\n      children: board.map((row, columnIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: row.map((cellValue, rowIndex) => /*#__PURE__*/_jsxDEV(StyledBordCell, {\n          type: cellType(columnIndex, rowIndex)\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 15\n        }, this))\n      }, columnIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(GameBoard, \"Oro3U0/55b4w6IcCy45OoVFFFFk=\", false, function () {\n  return [useInterval];\n});\n_c = GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["useEffect","useState","createFood","growSnake","moveSnake","snakeEatItSeff","snakeISOoutOfBounce","useInterval","ScoreBar","StyledBordCell","StyledGameBord","StyledSnakeCell","ModalWindowWraper","PauseWindow","BOARD_SIZE","BASE_SPEED","BASE_DIRECTION","directionFromKey","key","toString","toLowerCase","createBoard","count","board","row","currentRow","colum","push","GameBoard","START_SNAKE","cord","x","y","dir","setBoard","snake","setSnake","food","setFood","score","setScore","setDirection","speed","setSpeed","isPaused","setIsPaused","spawnFood","newSnake","newFood","some","console","log","document","body","style","overflow","window","addEventListener","moveControl","removeEventListener","reset","length","prevSnake","prev","cost","speedController","cellType","columnIndex","rowIndex","elem","e","direction","dificulty","Math","round","tonglePause","map","cellValue"],"sources":["D:/FrontEnd/snake-game/src/components/GameBoard/GameBoard.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { createFood } from \"../../utils/Food\";\r\nimport {\r\n  growSnake,\r\n  moveSnake,\r\n  snakeEatItSeff,\r\n  snakeISOoutOfBounce,\r\n} from \"../../utils/Snake\";\r\n\r\nimport useInterval from \"use-interval\";\r\nimport { ScoreBar } from \"../ScoreBar/ScoreBar\";\r\nimport {\r\n  StyledBordCell,\r\n  StyledGameBord,\r\n  StyledSnakeCell,\r\n} from \"./GameBoard.styled\";\r\nimport { ModalWindowWraper } from \"../modalWindowWraper/modalWindowWraper\";\r\nimport { PauseWindow } from \"../PauseWindow/PauseWindow\";\r\n\r\nconst BOARD_SIZE = 10;\r\nconst BASE_SPEED = 400;\r\nconst BASE_DIRECTION = \"down\";\r\nconst directionFromKey = (key = \"\") => {\r\n  switch (key.toString().toLowerCase()) {\r\n    case \"w\":\r\n      return \"up\";\r\n    case \"arrowup\":\r\n      return \"up\";\r\n\r\n    case \"s\":\r\n      return \"down\";\r\n    case \"arrowdown\":\r\n      return \"down\";\r\n\r\n    case \"d\":\r\n      return \"right\";\r\n    case \"arrowright\":\r\n      return \"right\";\r\n\r\n    case \"a\":\r\n      return \"left\";\r\n    case \"arrowleft\":\r\n      return \"left\";\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nconst createBoard = (BOARD_SIZE) => {\r\n  let count = 1;\r\n  const board = [];\r\n  for (let row = 0; row < BOARD_SIZE; row++) {\r\n    const currentRow = [];\r\n    for (let colum = 0; colum < BOARD_SIZE; colum++) {\r\n      currentRow.push(\"+\");\r\n    }\r\n    board.push(currentRow);\r\n  }\r\n  return board;\r\n};\r\n\r\nexport const GameBoard = () => {\r\n  const START_SNAKE = [\r\n    { cord: { x: 0, y: 0 }, dir: \"down\" },\r\n    { cord: { x: 0, y: 1 }, dir: \"down\" },\r\n  ];\r\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\r\n  const [snake, setSnake] = useState([...START_SNAKE]);\r\n  const [food, setFood] = useState(createFood(BOARD_SIZE));\r\n  const [score, setScore] = useState(0);\r\n  const [dir, setDirection] = useState(BASE_DIRECTION);\r\n  const [speed, setSpeed] = useState(BASE_SPEED);\r\n  const [isPaused, setIsPaused] = useState(\"true\");\r\n  const spawnFood = () => {\r\n    const newSnake = moveSnake();\r\n    let newFood = createFood(BOARD_SIZE);\r\n    if (\r\n      snake.some(({ cord: { x, y } }) => x === newFood.x && y === newFood.y)\r\n    ) {\r\n      newFood = spawnFood();\r\n    }\r\n    console.log(newFood);\r\n    return newFood;\r\n  };\r\n  useEffect(() => {\r\n    document.body.style.overflow = \"hidden\";\r\n    window.addEventListener(\"keydown\", moveControl);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", moveControl);\r\n      document.body.style.overflow = \"auto\";\r\n    };\r\n  });\r\n  const reset = () => {\r\n    setSnake([...START_SNAKE]);\r\n    setDirection(BASE_DIRECTION);\r\n    setScore(0);\r\n  };\r\n  useEffect(() => {\r\n    if (snakeEatItSeff(snake) || snakeISOoutOfBounce(snake, BOARD_SIZE)) {\r\n      setSnake([...START_SNAKE]);\r\n      setDirection(BASE_DIRECTION);\r\n      setScore(0);\r\n      setIsPaused(true);\r\n      return;\r\n    }\r\n    if (\r\n      snake[snake.length - 1].cord.x === food.x &&\r\n      snake[snake.length - 1].cord.y === food.y\r\n    ) {\r\n      setSnake((prevSnake) => growSnake(prevSnake));\r\n      setScore((prev) => prev + food.cost);\r\n      setFood(spawnFood());\r\n    }\r\n  }, [snake]);\r\n\r\n  useInterval(\r\n    () => {\r\n      console.log(\"interval\");\r\n      setSnake((prevSnake) => moveSnake(prevSnake, dir));\r\n      speedController();\r\n    },\r\n    isPaused ? null : speed\r\n  );\r\n\r\n  const cellType = (columnIndex, rowIndex) => {\r\n    if (\r\n      snake.some(\r\n        (elem) => elem.cord.x === columnIndex && elem.cord.y === rowIndex\r\n      )\r\n    )\r\n      return \"snake\";\r\n    if (food.x === columnIndex && food.y === rowIndex) return \"food\";\r\n  };\r\n\r\n  const moveControl = (e) => {\r\n    const direction = directionFromKey(e.key);\r\n    direction && setDirection(direction);\r\n  };\r\n\r\n  const speedController = () => {\r\n    const dificulty = BASE_SPEED - Math.round(score / 100) * 100;\r\n    setSpeed(dificulty);\r\n  };\r\n\r\n  const tonglePause = () => {\r\n    setIsPaused((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isPaused && (\r\n        <PauseWindow\r\n          closeWindow={tonglePause}\r\n          restart={() => {\r\n            reset();\r\n            tonglePause();\r\n          }}\r\n        />\r\n      )}\r\n      <ScoreBar>{score}</ScoreBar>\r\n      <button onClick={tonglePause}>Pause</button>\r\n      <StyledGameBord>\r\n        {board.map((row, columnIndex) => (\r\n          <div key={columnIndex}>\r\n            {row.map((cellValue, rowIndex) => (\r\n              <StyledBordCell\r\n                type={cellType(columnIndex, rowIndex)}\r\n                key={rowIndex}\r\n              ></StyledBordCell>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </StyledGameBord>\r\n    </>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}