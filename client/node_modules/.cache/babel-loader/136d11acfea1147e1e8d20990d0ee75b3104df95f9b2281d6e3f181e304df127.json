{"ast":null,"code":"var _jsxFileName = \"D:\\\\FrontEnd\\\\snake-game\\\\src\\\\components\\\\GameBoard\\\\GameBoard.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { growSnake, moveSnake, Snake, snakeEatItSeff } from \"../../utils/Snake\";\nimport { StyledBordCell, StyledGameBord, StyledSnakeCell } from \"./GameBoard.styled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst directionFromKey = function () {\n  let key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  switch (key.toString().toLowerCase()) {\n    case \"w\":\n      return \"up\";\n    case \"arrowup\":\n      return \"up\";\n    case \"s\":\n      return \"down\";\n    case \"arrowdown\":\n      return \"down\";\n    case \"d\":\n      return \"right\";\n    case \"arrowright\":\n      return \"right\";\n    case \"a\":\n      return \"left\";\n    case \"arrowleft\":\n      return \"left\";\n    default:\n      return \"\";\n  }\n};\nconst createBoard = BOARD_SIZE => {\n  let count = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let colum = 0; colum < BOARD_SIZE; colum++) {\n      currentRow.push(\"+\");\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\nexport const GameBoard = () => {\n  _s();\n  const [board, setBoard] = useState(createBoard(10));\n  const [snake, setSnake] = useState([{\n    cord: {\n      x: 0,\n      y: 0\n    },\n    dir: \"down\"\n  }, {\n    cord: {\n      x: 0,\n      y: 1\n    },\n    dir: \"down\"\n  }, {\n    cord: {\n      x: 0,\n      y: 2\n    },\n    dir: \"down\"\n  }, {\n    cord: {\n      x: 0,\n      y: 3\n    },\n    dir: \"down\"\n  }, {\n    cord: {\n      x: 0,\n      y: 4\n    },\n    dir: \"down\"\n  }]);\n  console.log(snakeEatItSeff(snake));\n  const [food, setFood] = useState({\n    x: 5,\n    y: 5\n  });\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    document.body.style.overflow = \"hidden\";\n    window.addEventListener(\"keydown\", handleMove);\n    return () => {\n      window.removeEventListener(\"keydown\", handleMove);\n      document.body.style.overflow = \"auto\";\n    };\n  });\n  useEffect(() => {\n    if (snake[snake.length - 1].cord.x === food.x && snake[snake.length - 1].cord.y === food.y) {\n      console.log();\n      setSnake(prevSnake => growSnake(prevSnake));\n      setScore(prev => prev + 1);\n      setFood({\n        x: 2,\n        y: 3\n      });\n    }\n  }, [snake]);\n  const cellType = (columnIndex, rowIndex) => {\n    if (snake.some(elem => elem.cord.x === columnIndex && elem.cord.y === rowIndex)) return \"snake\";\n    if (food.x === columnIndex && food.y === rowIndex) return \"food\";\n  };\n  const handleMove = e => {\n    const direction = directionFromKey(e.key);\n    const newSnake = moveSnake(snake, direction);\n    if (!snakeEatItSeff(newSnake)) {}\n    setSnake(prevSnake => {});\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(StyledGameBord, {\n      onKeyDown: handleMove,\n      children: board.map((row, columnIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: row.map((cellValue, rowIndex) => /*#__PURE__*/_jsxDEV(StyledBordCell, {\n          type: cellType(columnIndex, rowIndex),\n          children: [columnIndex, \" \", rowIndex]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this))\n      }, columnIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(GameBoard, \"vQbm/qqm1aC6gQaCDZ+DNUrQaXQ=\");\n_c = GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["useEffect","useState","growSnake","moveSnake","Snake","snakeEatItSeff","StyledBordCell","StyledGameBord","StyledSnakeCell","directionFromKey","key","toString","toLowerCase","createBoard","BOARD_SIZE","count","board","row","currentRow","colum","push","GameBoard","setBoard","snake","setSnake","cord","x","y","dir","console","log","food","setFood","score","setScore","document","body","style","overflow","window","addEventListener","handleMove","removeEventListener","length","prevSnake","prev","cellType","columnIndex","rowIndex","some","elem","e","direction","newSnake","map","cellValue"],"sources":["D:/FrontEnd/snake-game/src/components/GameBoard/GameBoard.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { growSnake, moveSnake, Snake, snakeEatItSeff } from \"../../utils/Snake\";\r\nimport {\r\n  StyledBordCell,\r\n  StyledGameBord,\r\n  StyledSnakeCell,\r\n} from \"./GameBoard.styled\";\r\n\r\nconst directionFromKey = (key = \"\") => {\r\n  switch (key.toString().toLowerCase()) {\r\n    case \"w\":\r\n      return \"up\";\r\n    case \"arrowup\":\r\n      return \"up\";\r\n\r\n    case \"s\":\r\n      return \"down\";\r\n    case \"arrowdown\":\r\n      return \"down\";\r\n\r\n    case \"d\":\r\n      return \"right\";\r\n    case \"arrowright\":\r\n      return \"right\";\r\n\r\n    case \"a\":\r\n      return \"left\";\r\n    case \"arrowleft\":\r\n      return \"left\";\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nconst createBoard = (BOARD_SIZE) => {\r\n  let count = 1;\r\n  const board = [];\r\n  for (let row = 0; row < BOARD_SIZE; row++) {\r\n    const currentRow = [];\r\n    for (let colum = 0; colum < BOARD_SIZE; colum++) {\r\n      currentRow.push(\"+\");\r\n    }\r\n    board.push(currentRow);\r\n  }\r\n  return board;\r\n};\r\n\r\nexport const GameBoard = () => {\r\n  const [board, setBoard] = useState(createBoard(10));\r\n  const [snake, setSnake] = useState([\r\n    { cord: { x: 0, y: 0 }, dir: \"down\" },\r\n    { cord: { x: 0, y: 1 }, dir: \"down\" },\r\n    { cord: { x: 0, y: 2 }, dir: \"down\" },\r\n    { cord: { x: 0, y: 3 }, dir: \"down\" },\r\n    { cord: { x: 0, y: 4 }, dir: \"down\" },\r\n  ]);\r\n  console.log(snakeEatItSeff(snake));\r\n\r\n  const [food, setFood] = useState({ x: 5, y: 5 });\r\n  const [score, setScore] = useState(0);\r\n  useEffect(() => {\r\n    document.body.style.overflow = \"hidden\";\r\n    window.addEventListener(\"keydown\", handleMove);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleMove);\r\n      document.body.style.overflow = \"auto\";\r\n    };\r\n  });\r\n  useEffect(() => {\r\n    if (\r\n      snake[snake.length - 1].cord.x === food.x &&\r\n      snake[snake.length - 1].cord.y === food.y\r\n    ) {\r\n      console.log();\r\n      setSnake((prevSnake) => growSnake(prevSnake));\r\n      setScore((prev) => prev + 1);\r\n\r\n      setFood({ x: 2, y: 3 });\r\n    }\r\n  }, [snake]);\r\n\r\n  const cellType = (columnIndex, rowIndex) => {\r\n    if (\r\n      snake.some(\r\n        (elem) => elem.cord.x === columnIndex && elem.cord.y === rowIndex\r\n      )\r\n    )\r\n      return \"snake\";\r\n    if (food.x === columnIndex && food.y === rowIndex) return \"food\";\r\n  };\r\n\r\n  const handleMove = (e) => {\r\n    const direction = directionFromKey(e.key);\r\n    const newSnake = moveSnake(snake, direction);\r\n    if (!snakeEatItSeff(newSnake)) {}setSnake((prevSnake) => {});\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StyledGameBord onKeyDown={handleMove}>\r\n        {board.map((row, columnIndex) => (\r\n          <div key={columnIndex}>\r\n            {row.map((cellValue, rowIndex) => (\r\n              <StyledBordCell\r\n                type={cellType(columnIndex, rowIndex)}\r\n                key={rowIndex}\r\n              >\r\n                {columnIndex} {rowIndex}\r\n              </StyledBordCell>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </StyledGameBord>\r\n    </>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}