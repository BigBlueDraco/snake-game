{"ast":null,"code":"var _jsxFileName = \"D:\\\\FrontEnd\\\\snake-game\\\\src\\\\components\\\\GameBoard\\\\GameBoard.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Snake } from \"../../utils/Snake\";\nimport { StyledBordCell, StyledGameBord, StyledSnakeCell } from \"./GameBoard.styled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst directionFromKey = function () {\n  let key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  switch (key.toString().toLowerCase()) {\n    case \"w\":\n      return \"up\";\n    case \"arrowup\":\n      return \"up\";\n    case \"s\":\n      return \"down\";\n    case \"arrowdown\":\n      return \"down\";\n    case \"d\":\n      return \"right\";\n    case \"arrowright\":\n      return \"right\";\n    case \"a\":\n      return \"left\";\n    case \"arrowleft\":\n      return \"left\";\n  }\n};\nconst createBoard = BOARD_SIZE => {\n  let count = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let colum = 0; colum < BOARD_SIZE; colum++) {\n      currentRow.push(\"+\");\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\nexport const GameBoard = () => {\n  _s();\n  const [board, setBoard] = useState(createBoard(10));\n  const [snake, setSnake] = useState(new Snake(0, 0));\n  useEffect(() => {\n    document.body.style.overflow = \"hidden\";\n    window.addEventListener(\"keydown\", handleMove);\n    return () => {\n      window.removeEventListener(\"keydown\", handleMove);\n      document.body.style.overflow = \"auto\";\n    };\n  });\n  const handleMove = e => {\n    const direction = directionFromKey(e.key);\n    const {\n      x,\n      y\n    } = snake.move(direction);\n    const newSnake = new Snake(x, y);\n    setSnake(newSnake);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(StyledGameBord, {\n      onKeyDown: handleMove,\n      children: board.map((row, columnIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: row.map((cellValue, rowIndex) => {\n          return /*#__PURE__*/_jsxDEV(StyledBordCell, {\n            type: snake.head.val.x === columnIndex && snake.head.val.y === rowIndex && \"snake\",\n            children: [columnIndex, \" \", rowIndex]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this);\n        })\n      }, columnIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(GameBoard, \"AUj7TIsc94h+78/oGaaTI1mDy50=\");\n_c = GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["useEffect","useState","Snake","StyledBordCell","StyledGameBord","StyledSnakeCell","directionFromKey","key","toString","toLowerCase","createBoard","BOARD_SIZE","count","board","row","currentRow","colum","push","GameBoard","setBoard","snake","setSnake","document","body","style","overflow","window","addEventListener","handleMove","removeEventListener","e","direction","x","y","move","newSnake","map","columnIndex","cellValue","rowIndex","head","val"],"sources":["D:/FrontEnd/snake-game/src/components/GameBoard/GameBoard.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Snake } from \"../../utils/Snake\";\r\nimport {\r\n  StyledBordCell,\r\n  StyledGameBord,\r\n  StyledSnakeCell,\r\n} from \"./GameBoard.styled\";\r\n\r\nconst directionFromKey = (key = \"\") => {\r\n  switch (key.toString().toLowerCase()) {\r\n    case \"w\":\r\n      return \"up\";\r\n    case \"arrowup\":\r\n      return \"up\";\r\n\r\n    case \"s\":\r\n      return \"down\";\r\n    case \"arrowdown\":\r\n      return \"down\";\r\n\r\n    case \"d\":\r\n      return \"right\";\r\n    case \"arrowright\":\r\n      return \"right\";\r\n\r\n    case \"a\":\r\n      return \"left\";\r\n    case \"arrowleft\":\r\n      return \"left\";\r\n  }\r\n};\r\n\r\nconst createBoard = (BOARD_SIZE) => {\r\n  let count = 1;\r\n  const board = [];\r\n  for (let row = 0; row < BOARD_SIZE; row++) {\r\n    const currentRow = [];\r\n    for (let colum = 0; colum < BOARD_SIZE; colum++) {\r\n      currentRow.push(\"+\");\r\n    }\r\n    board.push(currentRow);\r\n  }\r\n  return board;\r\n};\r\n\r\nexport const GameBoard = () => {\r\n  const [board, setBoard] = useState(createBoard(10));\r\n  const [snake, setSnake] = useState(new Snake(0, 0));\r\n  useEffect(() => {\r\n    document.body.style.overflow = \"hidden\";\r\n    window.addEventListener(\"keydown\", handleMove);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleMove);\r\n      document.body.style.overflow = \"auto\";\r\n    };\r\n  });\r\n\r\n  const handleMove = (e) => {\r\n    const direction = directionFromKey(e.key);\r\n    const { x, y } = snake.move(direction);\r\n    const newSnake = new Snake(x, y);\r\n    setSnake(newSnake);\r\n  };\r\n  return (\r\n    <>\r\n      {/* <button\r\n        onClick={() => {\r\n          const { x, y } = snake.move(\"left\");\r\n          const newSnake = new Snake(x, y);\r\n          setSnake(newSnake);\r\n        }}\r\n      >\r\n        Move\r\n      </button> */}\r\n      <StyledGameBord onKeyDown={handleMove}>\r\n        {board.map((row, columnIndex) => (\r\n          <div key={columnIndex}>\r\n            {row.map((cellValue, rowIndex) => {\r\n\r\n              return (\r\n                <StyledBordCell\r\n                  type={\r\n                    snake.head.val.x === columnIndex &&\r\n                    snake.head.val.y === rowIndex &&\r\n                    \"snake\"\r\n                  }\r\n                  key={rowIndex}\r\n                >\r\n                  {columnIndex} {rowIndex}\r\n                </StyledBordCell>\r\n              );\r\n            })}\r\n          </div>\r\n        ))}\r\n      </StyledGameBord>\r\n    </>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}