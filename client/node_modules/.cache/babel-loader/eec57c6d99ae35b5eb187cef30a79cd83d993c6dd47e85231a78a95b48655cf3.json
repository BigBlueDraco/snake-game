{"ast":null,"code":"var _jsxFileName = \"D:\\\\FrontEnd\\\\snake-game\\\\src\\\\components\\\\GameBoard\\\\GameBoard.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Snake } from \"../../utils/Snake\";\nimport { StyledBordCell, StyledGameBord, StyledSnakeCell } from \"./GameBoard.styled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createBoard = BOARD_SIZE => {\n  let count = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let colum = 0; colum < BOARD_SIZE; colum++) {\n      currentRow.push(\"+\");\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\nexport const GameBoard = () => {\n  _s();\n  const [board, setBoard] = useState(createBoard(10));\n  const [snake, setSnake] = useState(new Snake());\n  console.log(snake.head.val);\n  return /*#__PURE__*/_jsxDEV(StyledGameBord, {\n    children: board.map((row, columnIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: row.map((cellValue, rowIndex) => {\n        if (snake.head.val.x === columnIndex && snake.head.val.x === rowIndex) {\n          return /*#__PURE__*/_jsxDEV(StyledSnakeCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 22\n          }, this);\n        }\n        return /*#__PURE__*/_jsxDEV(StyledBordCell, {\n          children: [columnIndex, \" \", rowIndex]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 19\n        }, this);\n      })\n    }, columnIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"Yr074znlopFOsx+4V/R/wzjLEZs=\");\n_c = GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["useState","Snake","StyledBordCell","StyledGameBord","StyledSnakeCell","createBoard","BOARD_SIZE","count","board","row","currentRow","colum","push","GameBoard","setBoard","snake","setSnake","console","log","head","val","map","columnIndex","cellValue","rowIndex","x"],"sources":["D:/FrontEnd/snake-game/src/components/GameBoard/GameBoard.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { Snake } from \"../../utils/Snake\";\r\nimport {\r\n  StyledBordCell,\r\n  StyledGameBord,\r\n  StyledSnakeCell,\r\n} from \"./GameBoard.styled\";\r\n\r\nconst createBoard = (BOARD_SIZE) => {\r\n  let count = 1;\r\n  const board = [];\r\n  for (let row = 0; row < BOARD_SIZE; row++) {\r\n    const currentRow = [];\r\n    for (let colum = 0; colum < BOARD_SIZE; colum++) {\r\n      currentRow.push(\"+\");\r\n    }\r\n    board.push(currentRow);\r\n  }\r\n  return board;\r\n};\r\n\r\nexport const GameBoard = () => {\r\n  const [board, setBoard] = useState(createBoard(10));\r\n  const [snake, setSnake] = useState(new Snake());\r\n  console.log(snake.head.val);\r\n  return (\r\n    <StyledGameBord>\r\n      {board.map((row, columnIndex) => (\r\n        <div key={columnIndex}>\r\n          {row.map((cellValue, rowIndex) => {\r\n            if (\r\n              snake.head.val.x === columnIndex &&\r\n              snake.head.val.x === rowIndex\r\n            ) {\r\n              return <StyledSnakeCell></StyledSnakeCell>;\r\n            }\r\n            return<StyledBordCell key={rowIndex}>\r\n              {columnIndex} {rowIndex}\r\n            </StyledBordCell>;\r\n          })}\r\n        </div>\r\n      ))}\r\n    </StyledGameBord>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,KAAK,QAAQ,mBAAmB;AACzC,SACEC,cAAc,EACdC,cAAc,EACdC,eAAe,QACV,oBAAoB;AAAC;AAE5B,MAAMC,WAAW,GAAIC,UAAU,IAAK;EAClC,IAAIC,KAAK,GAAG,CAAC;EACb,MAAMC,KAAK,GAAG,EAAE;EAChB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGH,UAAU,EAAEG,GAAG,EAAE,EAAE;IACzC,MAAMC,UAAU,GAAG,EAAE;IACrB,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGL,UAAU,EAAEK,KAAK,EAAE,EAAE;MAC/CD,UAAU,CAACE,IAAI,CAAC,GAAG,CAAC;IACtB;IACAJ,KAAK,CAACI,IAAI,CAACF,UAAU,CAAC;EACxB;EACA,OAAOF,KAAK;AACd,CAAC;AAED,OAAO,MAAMK,SAAS,GAAG,MAAM;EAAA;EAC7B,MAAM,CAACL,KAAK,EAAEM,QAAQ,CAAC,GAAGd,QAAQ,CAACK,WAAW,CAAC,EAAE,CAAC,CAAC;EACnD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAIC,KAAK,EAAE,CAAC;EAC/CgB,OAAO,CAACC,GAAG,CAACH,KAAK,CAACI,IAAI,CAACC,GAAG,CAAC;EAC3B,oBACE,QAAC,cAAc;IAAA,UACZZ,KAAK,CAACa,GAAG,CAAC,CAACZ,GAAG,EAAEa,WAAW,kBAC1B;MAAA,UACGb,GAAG,CAACY,GAAG,CAAC,CAACE,SAAS,EAAEC,QAAQ,KAAK;QAChC,IACET,KAAK,CAACI,IAAI,CAACC,GAAG,CAACK,CAAC,KAAKH,WAAW,IAChCP,KAAK,CAACI,IAAI,CAACC,GAAG,CAACK,CAAC,KAAKD,QAAQ,EAC7B;UACA,oBAAO,QAAC,eAAe;YAAA;YAAA;YAAA;UAAA,QAAmB;QAC5C;QACA,oBAAM,QAAC,cAAc;UAAA,WAClBF,WAAW,OAAGE,QAAQ;QAAA,GADEA,QAAQ;UAAA;UAAA;UAAA;QAAA,QAElB;MACnB,CAAC;IAAC,GAXMF,WAAW;MAAA;MAAA;MAAA;IAAA,QAatB;EAAC;IAAA;IAAA;IAAA;EAAA,QACa;AAErB,CAAC;AAAC,GAvBWT,SAAS;AAAA,KAATA,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}