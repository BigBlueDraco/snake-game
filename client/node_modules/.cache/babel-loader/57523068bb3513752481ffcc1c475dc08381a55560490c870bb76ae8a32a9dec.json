{"ast":null,"code":"class SnakeNode {\n  constructor(val) {\n    this.val = val;\n    this.next = null;\n  }\n}\nexport class Snake {\n  constructor(x, y) {\n    const headNode = new SnakeNode({\n      x,\n      y\n    });\n    const tailNode = new SnakeNode({\n      x,\n      y\n    });\n    this.head = headNode;\n    this.tail = tailNode;\n  }\n  move() {\n    let direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    const {\n      x,\n      y\n    } = this.head.val;\n    switch (direction.toString().toLowerCase()) {\n      case \"up\":\n        return {\n          x,\n          y: y - 1\n        };\n      case \"down\":\n        return {\n          x,\n          y: y + 1\n        };\n      case \"left\":\n        return {\n          x: x - 1,\n          y\n        };\n      case \"right\":\n        return {\n          x: x + 1,\n          y\n        };\n      default:\n        return {\n          x,\n          y\n        };\n    }\n  }\n  grow() {\n    const newTail = new SnakeNode({});\n    const currentTail = this.tail;\n    this.tail = newTail;\n    this.tail.next = currentTail;\n    newSnakeCells.add(newTailCell);\n  }\n}","map":{"version":3,"names":["SnakeNode","constructor","val","next","Snake","x","y","headNode","tailNode","head","tail","move","direction","toString","toLowerCase","grow","newTail","currentTail","newSnakeCells","add","newTailCell"],"sources":["D:/FrontEnd/snake-game/src/utils/Snake.js"],"sourcesContent":["class SnakeNode {\r\n  constructor(val) {\r\n    this.val = val;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\nexport class Snake {\r\n  constructor(x, y) {\r\n    const headNode = new SnakeNode({ x, y });\r\n    const tailNode = new SnakeNode({ x, y });\r\n    this.head = headNode;\r\n    this.tail = tailNode;\r\n  }\r\n  move(direction = \"\") {\r\n    const { x, y } = this.head.val;\r\n    switch (direction.toString().toLowerCase()) {\r\n      case \"up\":\r\n        return { x, y: y - 1 };\r\n      case \"down\":\r\n        return { x, y: y + 1 };\r\n      case \"left\":\r\n        return { x: x - 1, y };\r\n      case \"right\":\r\n        return { x: x + 1, y };\r\n      default:\r\n        return { x, y };\r\n    }\r\n  }\r\n\r\n  grow() {\r\n    const newTail = new SnakeNode({})\r\n    const currentTail = this.tail;\r\n    this.tail = newTail;\r\n    this.tail.next = currentTail;\r\n    newSnakeCells.add(newTailCell);\r\n  }\r\n}\r\n"],"mappings":"AAAA,MAAMA,SAAS,CAAC;EACdC,WAAW,CAACC,GAAG,EAAE;IACf,IAAI,CAACA,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,IAAI,GAAG,IAAI;EAClB;AACF;AAEA,OAAO,MAAMC,KAAK,CAAC;EACjBH,WAAW,CAACI,CAAC,EAAEC,CAAC,EAAE;IAChB,MAAMC,QAAQ,GAAG,IAAIP,SAAS,CAAC;MAAEK,CAAC;MAAEC;IAAE,CAAC,CAAC;IACxC,MAAME,QAAQ,GAAG,IAAIR,SAAS,CAAC;MAAEK,CAAC;MAAEC;IAAE,CAAC,CAAC;IACxC,IAAI,CAACG,IAAI,GAAGF,QAAQ;IACpB,IAAI,CAACG,IAAI,GAAGF,QAAQ;EACtB;EACAG,IAAI,GAAiB;IAAA,IAAhBC,SAAS,uEAAG,EAAE;IACjB,MAAM;MAAEP,CAAC;MAAEC;IAAE,CAAC,GAAG,IAAI,CAACG,IAAI,CAACP,GAAG;IAC9B,QAAQU,SAAS,CAACC,QAAQ,EAAE,CAACC,WAAW,EAAE;MACxC,KAAK,IAAI;QACP,OAAO;UAAET,CAAC;UAAEC,CAAC,EAAEA,CAAC,GAAG;QAAE,CAAC;MACxB,KAAK,MAAM;QACT,OAAO;UAAED,CAAC;UAAEC,CAAC,EAAEA,CAAC,GAAG;QAAE,CAAC;MACxB,KAAK,MAAM;QACT,OAAO;UAAED,CAAC,EAAEA,CAAC,GAAG,CAAC;UAAEC;QAAE,CAAC;MACxB,KAAK,OAAO;QACV,OAAO;UAAED,CAAC,EAAEA,CAAC,GAAG,CAAC;UAAEC;QAAE,CAAC;MACxB;QACE,OAAO;UAAED,CAAC;UAAEC;QAAE,CAAC;IAAC;EAEtB;EAEAS,IAAI,GAAG;IACL,MAAMC,OAAO,GAAG,IAAIhB,SAAS,CAAC,CAAC,CAAC,CAAC;IACjC,MAAMiB,WAAW,GAAG,IAAI,CAACP,IAAI;IAC7B,IAAI,CAACA,IAAI,GAAGM,OAAO;IACnB,IAAI,CAACN,IAAI,CAACP,IAAI,GAAGc,WAAW;IAC5BC,aAAa,CAACC,GAAG,CAACC,WAAW,CAAC;EAChC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}