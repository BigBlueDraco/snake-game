{"ast":null,"code":"const createSbakeNode = function (x, y) {\n  let direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  const cord = {\n    x,\n    y\n  };\n  const dir = direction;\n  return {\n    cord,\n    dir\n  };\n};\nconst moveSnakeNode = snakeNode => {\n  const {\n    cord: {\n      x,\n      y\n    },\n    dir: direction\n  } = snakeNode;\n  switch (direction.toString().toLowerCase()) {\n    case \"up\":\n      return {\n        x,\n        y: y - 1\n      };\n    case \"down\":\n      return {\n        x,\n        y: y + 1\n      };\n    case \"left\":\n      return {\n        x: x - 1,\n        y\n      };\n    case \"right\":\n      return {\n        x: x + 1,\n        y\n      };\n    default:\n      return {\n        x,\n        y\n      };\n  }\n};\nexport const moveSnake = function () {\n  let snake = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let direction = arguments.length > 1 ? arguments[1] : undefined;\n  if (!direction) {\n    return snake;\n  }\n  return snake.map((snakeNode, index) => {\n    if (index === snake.length - 1) {\n      snakeNode.dir = direction;\n      snakeNode.cord = moveSnakeNode(snakeNode);\n      return snakeNode;\n    }\n    snakeNode.dir = snake[index + 1].dir;\n    snakeNode.cord = moveSnakeNode(snakeNode);\n    return snakeNode;\n  });\n};\nexport const growSnake = d;\nexport class Snake {\n  constructor(x, y) {\n    this.value = createSbakeNode(x, y);\n  }\n  grow() {}\n}","map":{"version":3,"names":["createSbakeNode","x","y","direction","cord","dir","moveSnakeNode","snakeNode","toString","toLowerCase","moveSnake","snake","map","index","length","growSnake","d","Snake","constructor","value","grow"],"sources":["D:/FrontEnd/snake-game/src/utils/Snake.js"],"sourcesContent":["const createSbakeNode = (x, y, direction = \"\") => {\r\n  const cord = { x, y };\r\n  const dir = direction;\r\n  return { cord, dir };\r\n};\r\nconst moveSnakeNode = (snakeNode) => {\r\n  const {\r\n    cord: { x, y },\r\n    dir: direction,\r\n  } = snakeNode;\r\n  switch (direction.toString().toLowerCase()) {\r\n    case \"up\":\r\n      return { x, y: y - 1 };\r\n    case \"down\":\r\n      return { x, y: y + 1 };\r\n    case \"left\":\r\n      return { x: x - 1, y };\r\n    case \"right\":\r\n      return { x: x + 1, y };\r\n    default:\r\n      return { x, y };\r\n  }\r\n};\r\n\r\nexport const moveSnake = (snake = [], direction) => {\r\n  if (!direction) {\r\n    return snake;\r\n  }\r\n  return snake.map((snakeNode, index) => {\r\n    if (index === snake.length - 1) {\r\n      snakeNode.dir = direction;\r\n      snakeNode.cord = moveSnakeNode(snakeNode);\r\n      return snakeNode;\r\n    }\r\n    snakeNode.dir = snake[index + 1].dir;\r\n    snakeNode.cord = moveSnakeNode(snakeNode);\r\n    return snakeNode;\r\n  });\r\n};\r\nexport const growSnake = (d)\r\n\r\nexport class Snake {\r\n  constructor(x, y) {\r\n    this.value = createSbakeNode(x, y);\r\n  }\r\n\r\n  grow() {}\r\n}\r\n"],"mappings":"AAAA,MAAMA,eAAe,GAAG,UAACC,CAAC,EAAEC,CAAC,EAAqB;EAAA,IAAnBC,SAAS,uEAAG,EAAE;EAC3C,MAAMC,IAAI,GAAG;IAAEH,CAAC;IAAEC;EAAE,CAAC;EACrB,MAAMG,GAAG,GAAGF,SAAS;EACrB,OAAO;IAAEC,IAAI;IAAEC;EAAI,CAAC;AACtB,CAAC;AACD,MAAMC,aAAa,GAAIC,SAAS,IAAK;EACnC,MAAM;IACJH,IAAI,EAAE;MAAEH,CAAC;MAAEC;IAAE,CAAC;IACdG,GAAG,EAAEF;EACP,CAAC,GAAGI,SAAS;EACb,QAAQJ,SAAS,CAACK,QAAQ,EAAE,CAACC,WAAW,EAAE;IACxC,KAAK,IAAI;MACP,OAAO;QAAER,CAAC;QAAEC,CAAC,EAAEA,CAAC,GAAG;MAAE,CAAC;IACxB,KAAK,MAAM;MACT,OAAO;QAAED,CAAC;QAAEC,CAAC,EAAEA,CAAC,GAAG;MAAE,CAAC;IACxB,KAAK,MAAM;MACT,OAAO;QAAED,CAAC,EAAEA,CAAC,GAAG,CAAC;QAAEC;MAAE,CAAC;IACxB,KAAK,OAAO;MACV,OAAO;QAAED,CAAC,EAAEA,CAAC,GAAG,CAAC;QAAEC;MAAE,CAAC;IACxB;MACE,OAAO;QAAED,CAAC;QAAEC;MAAE,CAAC;EAAC;AAEtB,CAAC;AAED,OAAO,MAAMQ,SAAS,GAAG,YAA2B;EAAA,IAA1BC,KAAK,uEAAG,EAAE;EAAA,IAAER,SAAS;EAC7C,IAAI,CAACA,SAAS,EAAE;IACd,OAAOQ,KAAK;EACd;EACA,OAAOA,KAAK,CAACC,GAAG,CAAC,CAACL,SAAS,EAAEM,KAAK,KAAK;IACrC,IAAIA,KAAK,KAAKF,KAAK,CAACG,MAAM,GAAG,CAAC,EAAE;MAC9BP,SAAS,CAACF,GAAG,GAAGF,SAAS;MACzBI,SAAS,CAACH,IAAI,GAAGE,aAAa,CAACC,SAAS,CAAC;MACzC,OAAOA,SAAS;IAClB;IACAA,SAAS,CAACF,GAAG,GAAGM,KAAK,CAACE,KAAK,GAAG,CAAC,CAAC,CAACR,GAAG;IACpCE,SAAS,CAACH,IAAI,GAAGE,aAAa,CAACC,SAAS,CAAC;IACzC,OAAOA,SAAS;EAClB,CAAC,CAAC;AACJ,CAAC;AACD,OAAO,MAAMQ,SAAS,GAAIC,CAAE;AAE5B,OAAO,MAAMC,KAAK,CAAC;EACjBC,WAAW,CAACjB,CAAC,EAAEC,CAAC,EAAE;IAChB,IAAI,CAACiB,KAAK,GAAGnB,eAAe,CAACC,CAAC,EAAEC,CAAC,CAAC;EACpC;EAEAkB,IAAI,GAAG,CAAC;AACV"},"metadata":{},"sourceType":"module","externalDependencies":[]}